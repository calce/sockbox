// Generated by CoffeeScript 1.6.3
var engine, packets;

packets = require('./packets');

engine = module.exports = {
  _commands: {},
  _plugins: []
};

engine.init = function(io, host) {
  this.io = io;
  this.host = host;
  this.socket = this.io.connect(this.host);
  this.socket.on('connect', this._onConnect);
  return this.socket.on('disconnect', this._onDisconnect);
};

engine._onConnect = function(socket) {
  var plugin, _i, _len, _ref, _results;
  console.log('fire!');
  _ref = this._plugins;
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    plugin = _ref[_i];
    _results.push(this._pluginOnConnect(plugin, socket));
  }
  return _results;
};

engine._onDisconnect = function(socket) {
  var plugin, _i, _len, _ref, _results;
  _ref = this._plugins;
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    plugin = _ref[_i];
    _results.push(this._pluginOnDisconnect(plugin, socket));
  }
  return _results;
};

engine.use = function(cmd, plugin) {
  var self;
  self = this;
  cmd = new String(cmd);
  if (!Array.isArray(this._commands[cmd])) {
    this._commands[cmd] = [];
    this.socket.on(cmd, function(data) {
      var _i, _len, _ref, _results;
      data = packets.toObject(data);
      if (data) {
        data.cmd = cmd;
        _ref = self._commands[cmd];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          plugin = _ref[_i];
          _results.push(self._pluginOnCommand(plugin, socket, data));
        }
        return _results;
      }
    });
  }
  if (this._commands[cmd].indexOf(plugin === -1)) {
    this._commands[cmd].push(plugin);
  }
  if (this._plugins.indexOf(plugin === -1)) {
    return this._plugins.push(plugin);
  }
};

engine._pluginOnConnect = function(plugin, socket) {
  if (plugin.onDisconnect) {
    return plugin.onConnect(socket);
  }
};

engine._pluginOnDisconnect = function(plugin, socket) {
  if (plugin.onDisconnect) {
    return plugin.onDisconnect(socket);
  }
};

engine._pluginOnCommand = function(plugin, data, socket) {
  if (plugin.onCommand) {
    return plugin.onCommand(data, socket);
  }
};
